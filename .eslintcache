[{"/Users/prashantjavia/Documents/Krupa-React/React-Practice/react-crud-demo/crud-demo/src/index.js":"1","/Users/prashantjavia/Documents/Krupa-React/React-Practice/react-crud-demo/crud-demo/src/App.js":"2","/Users/prashantjavia/Documents/Krupa-React/React-Practice/react-crud-demo/crud-demo/src/components/comments.jsx":"3","/Users/prashantjavia/Documents/Krupa-React/React-Practice/react-crud-demo/crud-demo/src/services/httpService.js":"4","/Users/prashantjavia/Documents/Krupa-React/React-Practice/react-crud-demo/crud-demo/src/components/add-edit-comment.jsx":"5"},{"size":633,"mtime":1609522223395,"results":"6","hashOfConfig":"7"},{"size":507,"mtime":1609523985274,"results":"8","hashOfConfig":"7"},{"size":3039,"mtime":1609726161690,"results":"9","hashOfConfig":"7"},{"size":467,"mtime":1609522477448,"results":"10","hashOfConfig":"7"},{"size":4518,"mtime":1609725988451,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1lm0b15",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/prashantjavia/Documents/Krupa-React/React-Practice/react-crud-demo/crud-demo/src/index.js",[],["26","27"],"/Users/prashantjavia/Documents/Krupa-React/React-Practice/react-crud-demo/crud-demo/src/App.js",[],"/Users/prashantjavia/Documents/Krupa-React/React-Practice/react-crud-demo/crud-demo/src/components/comments.jsx",["28","29"],"import React, { Component } from 'react';\nimport http from '../services/httpService';\nimport { ToastContainer } from 'react-toastify';\nimport config from '../config.json';\nimport { toast } from 'react-toastify';\n\nclass Comments extends Component {\n    state = {\n        comments: []\n    }\n\n    async componentDidMount() {\n        let { data } = await http.get(config.apiEndPoint);\n        let comments = [...data];\n        if (!!this.props.location.state) {\n            comments = [this.props.location.state.data, ...comments];\n        }\n        this.setState({ comments });\n    }\n\n    addComment = () => {\n        this.props.history.push('/add-edit-comment');\n    };\n\n    updateComment = (comment) => {\n        this.props.history.push('/add-edit-comment', { data: comment });\n    }\n\n    deleteComment = async comment => {\n        const originalComments = this.state.comments;\n        const comments = this.state.comments.filter(p => p.id !== comment.id);\n        this.setState({ comments });\n        try {\n            await http.delete(`${config.apiEndPoint}/${comment.id}`, comment);\n            toast.success('Commnet deleted successfully!');\n        } catch (ex) {\n            if (ex.response && ex.response.status === 404) {\n                toast('This comment have been already deleted.');\n            }\n            this.setState({ comments: originalComments });\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <ToastContainer></ToastContainer>\n                <h1>Comments render here</h1>\n                <div className=\"container\">\n                    <button className=\"btn btn-primary mb-2 float-right\" onClick={this.addComment}>Add comment</button>\n                    <table className=\"table table-bordered\">\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Email</th>\n                                <th>Description</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.comments.map(comment => (\n                                <tr key={comment.id}>\n                                    <td>{comment.name}</td>\n                                    <td>{comment.email}</td>\n                                    <td>{comment.body}</td>\n                                    <td>\n                                        <a className=\"mr-2 ml-2\" onClick={() => this.updateComment(comment)}><i className=\"fa fa-pencil\"></i></a>\n                                        <a className=\"mr-2 ml-2\" onClick={() => this.deleteComment(comment)}><i className=\"fa fa-trash\"></i></a>\n                                    </td>\n                                </tr>\n                            )\n                            )}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Comments;","/Users/prashantjavia/Documents/Krupa-React/React-Practice/react-crud-demo/crud-demo/src/services/httpService.js",["30"],"import axios from 'axios';\n// import { toast } from 'react-toastify';\n\n// axios.interceptors.response.use(null, error => {\n//     const expectedError = error.response && error.response.status >= 400 && error.response.status < 500;\n//     if (!expectedError) {\n//         toast('An unexpected error occured');\n//     }\n//     return Promise.reject(error);\n// })\n\nexport default {\n    get: axios.get,\n    post: axios.post,\n    put: axios.put,\n    delete: axios.delete\n}",["31","32"],"/Users/prashantjavia/Documents/Krupa-React/React-Practice/react-crud-demo/crud-demo/src/components/add-edit-comment.jsx",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":67,"column":41,"nodeType":"39","endLine":67,"endColumn":110},{"ruleId":"37","severity":1,"message":"38","line":68,"column":41,"nodeType":"39","endLine":68,"endColumn":110},{"ruleId":"40","severity":1,"message":"41","line":12,"column":1,"nodeType":"42","endLine":17,"endColumn":2},{"ruleId":"33","replacedBy":"43"},{"ruleId":"35","replacedBy":"44"},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["45"],["46"],"no-global-assign","no-unsafe-negation"]