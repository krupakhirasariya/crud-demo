[{"/Users/prashantjavia/Documents/Krupa-React/React-Practice/react-crud-demo/crud-demo/src/index.js":"1","/Users/prashantjavia/Documents/Krupa-React/React-Practice/react-crud-demo/crud-demo/src/App.js":"2","/Users/prashantjavia/Documents/Krupa-React/React-Practice/react-crud-demo/crud-demo/src/components/comments.jsx":"3","/Users/prashantjavia/Documents/Krupa-React/React-Practice/react-crud-demo/crud-demo/src/services/httpService.js":"4","/Users/prashantjavia/Documents/Krupa-React/React-Practice/react-crud-demo/crud-demo/src/components/edit-comment.jsx":"5","/Users/prashantjavia/Documents/Krupa-React/React-Practice/react-crud-demo/crud-demo/src/components/add-comment.jsx":"6"},{"size":938,"mtime":1612528657959,"results":"7","hashOfConfig":"8"},{"size":613,"mtime":1612528633702,"results":"9","hashOfConfig":"8"},{"size":3010,"mtime":1612528564092,"results":"10","hashOfConfig":"8"},{"size":443,"mtime":1612159083821,"results":"11","hashOfConfig":"8"},{"size":5441,"mtime":1612528590437,"results":"12","hashOfConfig":"8"},{"size":5097,"mtime":1612528609210,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1lm0b15",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/prashantjavia/Documents/Krupa-React/React-Practice/react-crud-demo/crud-demo/src/index.js",[],"/Users/prashantjavia/Documents/Krupa-React/React-Practice/react-crud-demo/crud-demo/src/App.js",[],"/Users/prashantjavia/Documents/Krupa-React/React-Practice/react-crud-demo/crud-demo/src/components/comments.jsx",["30","31"],"import React from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport { useQuery } from '@apollo/client';\nimport { gql, useMutation } from '@apollo/client';\nimport { useHistory } from 'react-router';\n\nconst GET_COMMENTS_QUERY = gql`\n  query comments {\n    comments {\n      data {\n        id\n        name\n        email\n        body\n      }\n    }\n  }\n`;\n\nconst DELETE_COMMENT_QUERY = gql`\n  mutation deleteComment($id: ID!) {\n    deleteComment(id: $id)\n  }\n`;\n\nconst Comments = (props) => {\n  const { comments } = props;\n  let commentsList = comments.data;\n  const [deleteComment] = useMutation(DELETE_COMMENT_QUERY);\n  const addComment = () => {\n    props.history.push('/add-comment');\n    // return <Redirect to='/add-comment' />\n  };\n\n  const updateComments = (comment) => {\n    props.history.push('/edit-comment/' + comment.id, { data: comment });\n  };\n\n  const deleteCommentData = (comment) => {\n    deleteComment({\n      variables: { id: comment.id },\n      update: (cache) => {\n        const existingComments = cache.readQuery({ query: GET_COMMENTS_QUERY });\n        const comments = existingComments.comments.data.filter(\n          (t) => t.id !== comment.id\n        );\n        cache.writeQuery({\n          query: GET_COMMENTS_QUERY,\n          data: comments ,\n        });\n      },\n    });\n  };\n\n  return (\n    <div>\n      <ToastContainer></ToastContainer>\n      <div className='container'>\n        <button\n          className='btn btn-primary mb-2 float-right'\n          onClick={addComment}\n        >\n          Add comment\n        </button>\n        <table className='table table-bordered'>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Email</th>\n              <th>Description</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {commentsList.map((comment) => (\n              <tr key={comment.id}>\n                <td>{comment.name}</td>\n                <td>{comment.email}</td>\n                <td>{comment.body}</td>\n                <td>\n                  <a\n                    className='mr-2 ml-2'\n                    onClick={() => updateComments(comment)}\n                  >\n                    <i className='fa fa-pencil'></i>\n                  </a>\n                  <a\n                    className='mr-2 ml-2'\n                    onClick={() => deleteCommentData(comment)}\n                  >\n                    <i className='fa fa-trash'></i>\n                  </a>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nconst CommentListQuery = () => {\n  const history = useHistory();\n  const { loading, error, data } = useQuery(GET_COMMENTS_QUERY);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n  if (error) {\n    console.error(error);\n    return <div>Error!</div>;\n  }\n  return <Comments comments={data.comments} history={history} />;\n};\n\n\nexport default CommentListQuery;\nexport { GET_COMMENTS_QUERY };\n",["32","33"],"/Users/prashantjavia/Documents/Krupa-React/React-Practice/react-crud-demo/crud-demo/src/services/httpService.js",["34"],"import axios from 'axios';\nimport { toast } from 'react-toastify';\n\naxios.interceptors.response.use(null, error => {\n    const expectedError = error.response && error.response.status >= 400 && error.response.status < 500;\n    if (!expectedError) {\n        toast('An unexpected error occured');\n    }\n    return Promise.reject(error);\n})\n\nexport default {\n    get: axios.get,\n    post: axios.post,\n    put: axios.put,\n    delete: axios.delete\n}",["35","36"],"/Users/prashantjavia/Documents/Krupa-React/React-Practice/react-crud-demo/crud-demo/src/components/edit-comment.jsx",[],"/Users/prashantjavia/Documents/Krupa-React/React-Practice/react-crud-demo/crud-demo/src/components/add-comment.jsx",["37"],{"ruleId":"38","severity":1,"message":"39","line":81,"column":19,"nodeType":"40","endLine":84,"endColumn":20},{"ruleId":"38","severity":1,"message":"39","line":87,"column":19,"nodeType":"40","endLine":90,"endColumn":20},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":12,"column":1,"nodeType":"47","endLine":17,"endColumn":2},{"ruleId":"41","replacedBy":"48"},{"ruleId":"43","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":24,"column":9,"nodeType":"52","messageId":"53","endLine":24,"endColumn":20},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["54"],"no-negated-in-lhs",["55"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["54"],["55"],"no-unused-vars","'updateCache' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]